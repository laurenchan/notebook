install.packages("~/Downloads/Geneland_4.0.8.tar", repos = NULL)
install.packages("~/Downloads/Geneland_4.0.8.tar.gz", repos = NULL)
install.packages("dev.tools")
install.packages("devtools")
library(devtools)
install.packages("~/Downloads/Geneland_4.0.8.tar.gz", repos = NULL)
install.packages("~/Downloads/Geneland_4.0.8.tar.gz", repos = NULL, type = "source")
install.packages("devtools")
install.packages("devtools")
install.packages(c("rinat", "devtools"))
devtools::install_github("ropensci/rotl")
devtools::install_github("phylotastic/datelife")
library(datelife)
?datelife
library(rinat)
proj_dat <- get_inat_obs_project("pu-vert-zoo", type="info", raw=FALSE)
proj_obs <- get_inat_obs_project(proj_dat$id, type="observations")
spp_list <- unique(proj_obs$Scientific.name)
spp_list
dim(spp_list)
spplist <- as.matrix(spp_list)
dim(spplist)
datelife_search(input=spplist)
treeout<-datelife_search(input=spp_list)
treeout
name(treeout)
names(treeout)
plot(treeout)
treeout<-datelife_search(input=spplist)
plot(treeout)
treeout
treeout[1]
treeout[[1]]
treeout[[]]
treeout[[2]]
treeout[[3]]
treeout[[4]]
treeout[[5]]
treeout[[6]]
treeout[[13]]
devtools::install_github("phylotastic/rphylotastic")
?rphylotastic
??rphylotastic
library(rphylotastic)
help(rphylotastic)
treeout<-datelife_search(input=spp_list)
taxa_get_phylomatic_tree(spp_list)
taxa_get_otol_tree(spp_list)
testrtee<-taxa_get_otol_tree(spp_list)
plot(testrtee)
exit
q()
shiny::runApp('Documents/GitHub/phylotastic/fusion3_lmc')
runApp('Documents/GitHub/phylotastic/fusion3_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
shiny::runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
shiny::runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp()
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
shiny::runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp()
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
runApp('Documents/GitHub/phylotastic/fusion4_lmc')
install.packages("knitr")
install.packages(c("curl", "devtools", "fields", "ggplot2", "hms", "httpuv", "knitcitations", "magick", "oai", "pkgbuild", "raster", "rmarkdown", "seqinr", "spam", "sys", "tidyr", "tidytree", "units", "vegan", "whisker", "xfun", "xml2"))
library('knitr')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(reticulate)
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
`code` in this format?
`code` in this format?
install.packages(c("sp", "raster", "rgdal"))
knitr::opts_chunk$set(echo = TRUE)
library(raster)
east.us.lights <- raster("~/Downloads/B1.jpg")
plot(east.us.lights)
par("mar")
par(mar=c(1,1,1,1))
plot(east.us.lights)
plot(us.lights)
us.lights <- raster("BlackMarble_2016_3km_geo.tif")
plot(us.lights)
```{r echo=FALSE}
library(sp)
library(rgdal)
library(raster)
us.lights <- raster("BlackMarble_2016_3km_geo.tif")
plot(us.lights)
library(RColorBrewer)
us.lights <- raster("BlackMarble_2016_3km_geo.tif")
my.palette <- brewer.pal(n = 20, name = "YlGnBu")
plot(us.lights, col=my.palette)
us.lights <- raster("BlackMarble_2016_3km_geo.tif")
my.palette <- brewer.pal(n = 20, name = "YlGnBu")
plot(us.lights, col=my.palette)
us.lights <- raster("BlackMarble_2016_3km_geo.tif")
my.palette <- brewer.pal(n = 9, name = "YlGnBu")
plot(us.lights, col=my.palette)
library(viridis)
library(ggplot2)
ggplot(data=us.lights)
ggplot(data=us.lights)
class(us.lights)
ggplot() + geom_raster(data=us.lights, aes(x=x, y=y, fill=data))
ggplot() + geom_raster(data=us.lights, aes(x=x, y=y, fill=fill))
names(us.lights)
us.lights
df <- data.frame(us.lights)
lights.p <- rasterToPoints(us.lights)
df <- data.frame(lights.p)
colnames(df) <- c ("Longitude", "Latitude", "map")
ggplot(data=df, aes(y=Latitude,x=Longitude)) + geom_raster(aes(fill=map))
library(rebird)
help("rebird")
ebirdregion("US-OR-FH")
ebirdregion("US-OR-FH", key=96h4mi8jusor)
ebirdregion("US-OR-FH", key="96h4mi8jusor")
a<-ebirdregion("US-OR-FH", key="96h4mi8jusor")
a
print a
dat(a)
names(a)
dim(a)
a<-ebirdregion("L163529", key="96h4mi8jusor")
a
View(a)
View(a)
source('~/Desktop/Untitled.R')
ebirdregion(loc=fernhill, key=mykey)
View(a)
View(a)
ebirdregion(loc=fernhill, simple=FALSE, key=mykey)
a<-ebirdfreq(loc=fernhill, startyear=2018, endyear=2018, startmonth = 9, endmonth = 11)
a<-ebirdfreq(loctype="hostspots", loc=fernhill, startyear=2018, endyear=2018, startmonth = 9, endmonth = 11)
a<-ebirdfreq(loctype="hotspots", loc=fernhill, startyear=2018, endyear=2018, startmonth = 9, endmonth = 11)
a
View(a)
View(a)
names(a)
library(rebird)
help("rebird")
devtools::install_github("ropensci/rebird")
library(rebird)
help(rebird)
rebird
library(rebird)
help("rebird")
library(httr)
urlhttps <- paste0('https://ebird.org/ws1.1/', 'data/obs/', 'geo_spp/recent')
urlhttp <- paste0('http://ebird.org/ws1.1/', 'data/obs/', 'geo_spp/recent')
ebird_compact <- function(x) Filter(Negate(is.null), x)
args <- ebird_compact(list(fmt='json', sci='Anas platyrhynchos',
lat=round(39,2), lng=round(-121,2),
maxResults=5,
locale=NULL))
GET(urlhttps, query=args, config=verbose)
GET(urlhttps, query=args, config=verbose())
urlhttps <- paste0('https://api.ebird.org/v2/', 'data/obs/', 'geo_spp/recent')
GET(urlhttps, query=args, config=verbose())
GET?
?
?GET()
mykey <- "96h4mi8jusor"
fernhill <- "L163529"
GET(urlhttps, query=args, config=verbose(), key=mykey)
fernhill <- "L163529"
urlhttps <- paste0('https://api.ebird.org/v2/', 'data/obs/', 'L163529/recent')
GET(urlhttps, query=args, config=verbose(), key=mykey)
library(rebird)
knitr::opts_chunk$set(echo = TRUE)
mykey <- "96h4mi8jusor"
fernhill <- "L163529"
mykey <- "96h4mi8jusor"
fernhill <- "L163529"
mykey <- "96h4mi8jusor"
fernhill <- "L163529"
knitr::opts_chunk$set(echo = TRUE)
ebirdhistorical(loc=fernhill, date="2016-10-01", key=mykey)
date()
date[1]
today<-date()
today[1]
today[2]
month()
paste("2019","10","03", sep="-")
day1<-ebirdhistorical(loc=fernhill, date="2016-10-01", key=mykey)
day2<-ebirdhistorical(loc=fernhill, date="2016-10-02", key=mykey)
cat(day1,day2)
append(day1,day2)
View(day1)
day1<-ebirdhistorical(loc=fernhill, date="2016-10-01", key=mykey, simple=F)
day1
day1<-ebirdhistorical(loc=fernhill, date="2016-10-01", key=mykey, simple=FALSE)
names(day1)
dim(day1)
day1<-ebirdhistorical(loc=fernhill, date="2016-10-01", key=mykey, fieldSet = full)
day1<-ebirdhistorical(loc=fernhill, date="2016-10-01", key=mykey, fieldSet = "full")
names(day1)
day2<-ebirdhistorical(loc=fernhill, date="2016-10-02", key=mykey, fieldSet = "full")
rbind(day1,day2)
seq.Date("2018-10-01", "2018-10-15")
seq.Date(as.Date("2018-10-01"), as.Date("2018-10-15"))
seq.Date(as.Date("2018-10-01"), as.Date("2018-10-15"), by=1)
startdate <- as.Date("2018-10-01")  # Eventually put this up front in script, or even as input for a function.
enddate <- as.Date("2018-10-15")
for i in (seq(startdate, enddate, 1)){}
for (i in seq(startdate, enddate, 1)){
print(i)
}
startdate
dat<-NULL
for (i in seq.Date(startdate, enddate, 1)){
daydat<-ebirdhistorical(loc=fernhill, date=i, key=mykey, fieldSet = "full")
dat<- rbind(dat,daydat)
}
dat<-NULL
for (i in seq.Date(startdate, enddate, 1)){
daydat<-ebirdhistorical(loc=fernhill, date=i, key=mykey, fieldSet = "full")
dat<- rbind(dat,daydat)
}
dat<-NULL
seq.Date(startdate, enddate, 1)
i in seq.Date(startdate, enddate, 1)
i
as.Date(i)
as.Date.numeric(i)
Date(i)
as.Date(i)
as.Date(i, origin="1970-01-01")
dat<-NULL
for (i in seq.Date(startdate, enddate, 1)){
thedate <- as.Date(i, origin="1970-01-01")
daydat <-ebirdhistorical(loc=fernhill, date=thedate, key=mykey, fieldSet = "full")
dat<- rbind(dat,daydat)
}
dat
## Then get the records
```{r eval=TRUE}
knitr::opts_chunk$set(echo = TRUE)
for (i in seq.Date(startdate, enddate, 1)){
thedate <- as.Date(i, origin="1970-01-01")
daydat <- ebirdhistorical(loc=fernhill, date=thedate, key=mykey, fieldSet = "full")
dat<- rbind(dat,daydat)
}
myrecords("2018-10-01", "2018-10-05")
library(rebird)
mykey <- "96h4mi8jusor"
fernhill <- "L163529"
myrecords <- function(start, end){
startdate <- as.Date(start)
enddate <- as.Date(end)
dat<-NULL
for (i in seq.Date(startdate, enddate, 1)){
thedate <- as.Date(i, origin="1970-01-01")
daydat <- ebirdhistorical(loc=fernhill, date=thedate, key=mykey, fieldSet = "full")
dat<- rbind(dat,daydat)
}
}
myrecords <- function(start, end){
startdate <- as.Date(start)
enddate <- as.Date(end)
dat<-NULL
for (i in seq.Date(startdate, enddate, 1)){
thedate <- as.Date(i, origin="1970-01-01")
daydat <- ebirdhistorical(loc=fernhill, date=thedate, key=mykey, fieldSet = "full")
dat<- rbind(dat,daydat)
}
}
myrecords("2018-10-01", "2018-10-05")
install.packages("googlesheets")
library(googlesheets)
suppressMessages(library(dplyr))
gs_ls()
ls
gs_ls()
mysheets <- gs_ls()
mysheets
View(mysheets)
View(mysheets)
gs_ls("Drift Simulations BIOL315")
Cstack_info()
clear()
library(googlesheets)
suppressMessages(library(dplyr))
Cstack_info()
gs_ls("Drift Simulations BIOL315")
ulimit -s
gs_ls("Drift Simulations BIOL315")
ebird_key <- "4fa7b334-ce0d-4e88-aaae-2e0c138d049e"
bird_families <- c("Trochilidae", "Thraupidae", "Ardeidae", "Accipitridae")
families <- data_frame(family = bird_families) %>%
group_by(family) %>%
do(name_suggest(q = .$family, rank = "family")) %>%
filter(family == canonicalName) %>%
dplyr::select(family, key)
gb <- occ_search(taxonKey = families$key, country = "EC", datasetKey = ebird_key,
limit = 3000, return = "data",
fields = c("family", "species", "decimalLatitude", "decimalLongitude"),
hasCoordinate = TRUE, hasGeospatialIssue = FALSE) %>%
rbind_all %>%
rename(lng = decimalLongitude, lat = decimalLatitude) %>%
as.data.frame
library(dplyr)
library(tidyr)
library(sp)
library(raster)
library(rgeos)
library(rgbif)
library(viridis)
library(gridExtra)
library(rasterVis)
set.seed(1)
ebird_key <- "4fa7b334-ce0d-4e88-aaae-2e0c138d049e"
bird_families <- c("Trochilidae", "Thraupidae", "Ardeidae", "Accipitridae")
families <- data_frame(family = bird_families) %>%
group_by(family) %>%
do(name_suggest(q = .$family, rank = "family")) %>%
filter(family == canonicalName) %>%
dplyr::select(family, key)
gb <- occ_search(taxonKey = families$key, country = "EC", datasetKey = ebird_key,
limit = 3000, return = "data",
fields = c("family", "species", "decimalLatitude", "decimalLongitude"),
hasCoordinate = TRUE, hasGeospatialIssue = FALSE) %>%
rbind_all %>%
rename(lng = decimalLongitude, lat = decimalLatitude) %>%
as.data.frame
gb
ebird_key <- "4fa7b334-ce0d-4e88-aaae-2e0c138d049e"
bird_families <- c("Trochilidae", "Thraupidae", "Ardeidae", "Accipitridae")
families <- data_frame(family = bird_families) %>%
group_by(family) %>%
do(name_suggest(q = .$family, rank = "family")) %>%
filter(family == canonicalName) %>%
dplyr::select(family, key)
gb <- occ_search(taxonKey = families$key, country = "EC", datasetKey = ebird_key,
limit = 300, return = "data",
fields = c("family", "species", "decimalLatitude", "decimalLongitude"),
hasCoordinate = TRUE, hasGeospatialIssue = FALSE) %>%
rbind_all %>%
rename(lng = decimalLongitude, lat = decimalLatitude) %>%
as.data.frame
gb
names(gb)
coordinates(gb) <- ~ lng + lat
gb
names(gb)
coordinates()
setwd("Documents/GitHub/notebook/citizen_sci/")
library(dplyr)
library(tidyr)
library(sp)
library(raster)
library(rgeos)
set.seed(1)
study_area <- getData("GADM", country = "USA", level = 0, path="data/hex-grids") %>%
disaggregate %>%
geometry
getwd()
!mkdir data
study_area <- getData("GADM", country = "USA", level = 0, path="./data/hex-grids") %>%
disaggregate %>%
geometry
study_area <- sapply(study_area@polygons, slot, "area") %>%
{which(. == max(.))} %>%
study_area[.]
clip_list <- c(-80, -70, 35, 45)
study_area <- crop(study_area, clip_list)
plot(study_area, col="gray", bg="lightblue", axes=TRUE)
plot(study_area, col="gray", bg="lightblue", axes=TRUE)
source('make_grid.r')
study_area_utm <- CRS("+proj=utm +zone=14 +datum=WGS84 +units=km +no_defs") %>%
spTransform(study_area, .)
hex_grid <- make_grid(study_area_utm, cell_area = 625, clip = FALSE)
hex_grid <- make_grid(study_area_utm, type="hexagonal", cell_area = 625, clip = FALSE)
bamona_HY1015 <- read.csv("../Data/bamonahypenascabra1015.csv", header=T)
plot(study_area_utm, col = "grey50", bg = "light blue", axes = FALSE)
plot(hex_grid, border = "orange", add = TRUE)
plot(study_area_utm, col = "grey50", bg = "light blue", axes = FALSE)
plot(hex_grid, border = "orange", add = TRUE)
bamona_HY1015 <- read.csv("../Data/bamonahypenascabra1015.csv", header=T)
inat_HY1015 <- read.csv("../Data/in")
inat_HY1015 <- read.csv("../Data/inathypenascabra1015.csv")
names(bamona_HY1015)
names(inat_HY1015)
#use names(bamona_HY1015) to look at column names
bamona_HY1015$Observation.Date <- as.Date(bamona_HY1015$Observation.Date, format='%m/%d/%Y')
b_keep <- c("Record.Number", "Scientific.Name","Observation.Date","Region.s.","Lat.Long","Longitude")
n_keep <- c("id", "scientific_name", "observed_on", "place_guess", "latitude", "longitude")
inat_HY1015 <- inat_HY1015[n_keep]
names(inat_HY1015)
bamona_HY1015 <- bamona_HY1015[b_keep]
colnames(bamona_HY1015) <- c("id", "scientific.name", "obs.date", "locality", "latitude", "longitude")
colnames(inat_HY1015) <- c("id", "scientific.name", "obs.date", "locality", "latitude", "longitude")
all_dat <- bind_rows(bamona_HY1015, inat_HY1015)
bamona_HY1015
names(bamona_HY1015)
class(bamona_HY1015$id)
class(bamona_HY1015$obs.date)
all_dat <- rbind(bamona_HY1015, inat_HY1015)
all_dat
all_dat <- all_dat[(!is.na(all_dat$latitude) | !is.na(all_dat$longitude)),]
coordinates(all_dat) <- ~ longitude + latitude
projection(all_dat) <- projection(study_area)
sightings <- spTransform(all_dat,
CRS("+proj=utm +zone=14 +datum=WGS84 +units=km +no_defs"))
cropdf  <- crop(sightings, study_area_utm)
plot(study_area_utm, col = "grey50", bg = "light blue", axes = FALSE)
plot(hex_grid, border = "orange", add = TRUE)
plot(cropdf, add=T, pch=19, cex=0.25)
